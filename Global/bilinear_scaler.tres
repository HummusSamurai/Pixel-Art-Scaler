[gd_resource type="CanvasItemShader" format=1]

[resource]

_code = {
"fragment": "uniform float Zoom = 0.5;
uniform vec2 Screen_Size = vec2(1,1);

vec2 GlobalToLocal (vec2 u) {
	u = u - vec2(0.5,0.5);
	u = u * Zoom;
	u = u + vec2(0.5,0.5);
	
	return u;
}

vec3 GetBilinearFilteredColor(vec2 texcoord)
{
	texcoord = GlobalToLocal(texcoord);
	
	vec2 texel_size = (1 / Screen_Size) * Zoom;
	
	vec3 s1 = texscreen(texcoord + vec2(0.0, texel_size.y));
	vec3 s2 = texscreen(texcoord + vec2(texel_size.x, 0.0));
	vec3 s3 = texscreen(texcoord + vec2(texel_size.x, texel_size.y));
	vec3 s4 = texscreen(texcoord);
	
	vec2 TexturePosition = texcoord * Screen_Size;
	
	float fu = fract(TexturePosition.x);
	float fv = fract(TexturePosition.y);
	
	vec3 tmp1 = mix(s4, s2, fu);
	vec3 tmp2 = mix(s1, s3, fu);
	
	return mix(tmp1, tmp2, fv);
}

vec2 texel_size = (1 / Screen_Size);
COLOR = vec4(GetBilinearFilteredColor(SCREEN_UV - 0.498 * texel_size),1);",
"fragment_ofs": 0,
"light": "",
"light_ofs": 0,
"vertex": "",
"vertex_ofs": 0
}

